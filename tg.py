import telebot
from telebot import types
import index 
import mysql.connector
import threading
from threading import Thread
def main():
    DEBUG = 0
    TG_TOKEN = #INSERT_BOT_TOKEN
    bot = telebot.TeleBot(TG_TOKEN)
    SessionsStore = {}
    #–ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É  –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    def sessions_restore():
        auth_user = get_session_data()
        for user in auth_user:
                id = user[0]
                login = user[1]
                password = user[2]
                try:
                    SessionsStore[id] = index.JiraSession(login,password)
                    print('Restored session for:' + str(SessionsStore[id].jira_login))
                    SessionsStore[id].get_unresolved_tasks(True)
                    thread = Thread(target=SessionsStore[id].fetch_new_issues,args=([id]))
                    thread.start()
                except:
                    if DEBUG:  
                        raise
                    bot.send_message(*YOUR TELEGRAM ID HERE*, 'üò¢–ù–µ –º–æ–≥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é!–õ–æ–≥–∏–Ω:' + login)

    #–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–∞—Ö –∏–∑ –ë–î
    def get_session_data():
        connection = mysql.connector.connect(user=*MySQL_login*,password=*MySQL_password*, database = *MySQL_db*, host=*MySQL_host*, port = *MySQL_port*)
        cursor=connection.cursor()
        #TABLE session_data id = bigint, login = VARCHAR(100), password = VARCHAR(100)
        sql ='select id, login, password from session_data'

        cursor.execute(sql)
        session_data = cursor.fetchall()
        connection.close()
        return session_data
    
    def new_user(id,login,password):
        connection = mysql.connector.connect(user=*MySQL_login*,password=*MySQL_password*, database = *MySQL_db*, host=*MySQL_host*, port = *MySQL_port*)
        cursor=connection.cursor()

        sql =f'INSERT INTO session_data VALUES ({id}, "{login}", "{password}")'

        cursor.execute(sql)
        connection.commit()
        connection.close()

    def del_user(id):
        connection = mysql.connector.connect(user=*MySQL_login*,password=*MySQL_password*, database = *MySQL_db*, host=*MySQL_host*, port = *MySQL_port*)
        cursor=connection.cursor()

        sql =f'DELETE FROM session_data WHERE ID = {id}'

        cursor.execute(sql)
        connection.commit()
        connection.close()
    def logout(id):
        SessionsStore[id].is_subscribe = False
        del_user(id)
        del SessionsStore[id]
    sessions_restore()
    @bot.message_handler(commands=['start'])
    def start(message):
        if  message.from_user.id not in SessionsStore:
            try:
                bot.send_message(message.from_user.id, 'üëª–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é!üëª\n‚ùóÔ∏è–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –î–∂–∏—Ä–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n  /auth *–¢–£–¢ –í–ê–® –õ–û–ì–ò–ù*  *–¢–£–¢ –í–ê–® –ü–ê–†–û–õ–¨*\n–ü—Ä–∏–º–µ—Ä:  /auth ivan.pupkin  pupkin_pas3219\n‚ùóÔ∏è–ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏–ª–∏ —Å–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–æ–ª—å –≤ –¥–∂–∏—Ä–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–í—ã—Ö–æ–¥"\n‚ùóÔ∏è–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥!') 
            except:
                if DEBUG:  
                    raise
                print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ')       

    @bot.message_handler(commands=['auth'])
    def auth(message):
        if  message.from_user.id not in SessionsStore:
            if len(message.text.split()) == 3:
                login = message.text.split()[1]
                passsword = message.text.split()[2]
                try:
                    SessionsStore[message.from_user.id] = index.JiraSession(login,passsword)
                    new_user(message.from_user.id, login, passsword)
                except:
                    bot.send_message(message.from_user.id, 'üò¢–ù–µ–≤–µ—Ä—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')

                try:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.row('üì•–ú–æ–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏üì•', '–í—ã—Ö–æ–¥')
                    bot.send_message(message.from_user.id, 'üìù–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç: ' + SessionsStore[message.from_user.id].get_unresolved_tasks(False), reply_markup=markup)
                    thread = Thread(target=SessionsStore[message.from_user.id].fetch_new_issues,args=([message.from_user.id]))
                    thread.start()
                except:
                    if DEBUG:  
                        raise
                    print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á')
                    pass
            else:
                bot.send_message(message.from_user.id, 'üò¢–ù–µ–≤–µ—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!')
        else:
            bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ãüòÖ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ "–í—ã—Ö–æ–¥"')


    @bot.message_handler(content_types=['text'])
    def send_text(message):
        try:
            if  message.from_user.id  in SessionsStore:
                if message.text == 'üì•–ú–æ–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏üì•':
                    bot.send_message(message.from_user.id, 'üìù–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç: ' + SessionsStore[message.from_user.id].get_unresolved_tasks(False))

                if message.text.lower() == '–≤—ã—Ö–æ–¥':
                    try:
                        logout(message.from_user.id)
                        bot.send_message(message.from_user.id, '‚úÖ–í—ã—Ö–æ–¥. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. \n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ!')
                    except:
                        print('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞')
            else:
                bot.send_message(message.from_user.id, '‚ùå–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
        except:
            if DEBUG:  
                raise
            pass
    bot.polling(none_stop=True, interval=0) #–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å

if __name__ == "__main__":
    while True:
        try:
            main()
        except:
            TG_TOKEN = #INSERT_BOT_TOKEN
            bot = telebot.TeleBot(TG_TOKEN)
            bot.send_message(*YOUR TG ID*, '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ãüòì')
        